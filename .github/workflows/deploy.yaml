name: CI/CD Pipeline

on:
  push:
    tags:
      # Se activa con tags semÃ¡nticos
      - 'v*.*.*'

env:
  DOCKER_IMAGE_NAME: ecodisonante/cloudnative.faker

jobs:
  build-and-deploy:
    # Solo se ejecute en la rama dev
    # if: github.ref == 'refs/heads/dev' 
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar `TAG` en el entorno
      - name: Set TAG from GitHub ref
        run: echo "TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\///')" >> $GITHUB_ENV
      
      # 3. Configurar acceso a Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # 4. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build \
            --file ./Dockerfile \
            --build-arg API_VITALSIGNS_URL=http://signs:8083 \
            --build-arg API_PATIENT_URL=http://patient:8082 \
            --build-arg API_QUEUE_URL=http://measurement:8086 \
            --build-arg EXECUTION_TIME=300000 \
            --tag $DOCKER_IMAGE_NAME:$TAG \
            --tag $DOCKER_IMAGE_NAME:latest \
            .

      # 4. Subir la imagen a Docker Hub
      - name: Push Docker image
        run: |
          docker push $DOCKER_IMAGE_NAME:$TAG
          docker push $DOCKER_IMAGE_NAME:latest

       # 5. Despliegue en el servidor AWS
      - name: Deploy to AWS Server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_SERVER_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: 22
          envs: DOCKER_IMAGE_NAME,TAG
          script: |

            # Descargar la imagen
            sudo docker pull $DOCKER_IMAGE_NAME:$TAG

            # Detener y eliminar el contenedor existente si existe
            if [ $(sudo docker ps -a -q -f name=faker) ]; then
              echo "Deteniendo y eliminando el contenedor 'faker'..."
              sudo docker stop faker
              sudo docker rm faker
            else
              echo "El contenedor 'faker' no existe, continuando..."
            fi

            # Ejecutar el nuevo contenedor
            sudo docker run -d --name faker \
              --network app-network \
              -p 8090:8090 \
              --env "cors.allowed-origins=${{ secrets.CORS_ALLOWED_ORIGINS }}" \
              --env "server.port=8090" \
              --env "spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${{ secrets.JWK_SET_URI }}" \
              --env "spring.application.name=faker" \
              --env "api.vitalsigns=http://signs:8083" \
              --env "api.patient=http://paciente-service:8082" \
              --env "api.measurement=http://queue:8086" \
              --env "execution.time=300000" \
              "$DOCKER_IMAGE_NAME:$TAG"